/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import ftpclient.FTPClient;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author lupus
 */
public class FTPClientGui extends javax.swing.JFrame {

    private class FTPDownloader implements Runnable {

        String fileName;

        public FTPDownloader(String fileName) {
            this.fileName = fileName;
        }

        @Override
        public void run() {
            try {
                client.retr(fileName, null);

            } catch (IOException ex) {
                Logger.getLogger(FTPClientGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(FTPClientGui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }
    private final FTPClient client = new FTPClient();
    /**
     * Creates new form FTPClientGui
     */
    private boolean connected = false;

    public FTPClientGui() {
        initComponents();
        client.setOutputTo(logger);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFieldHostName = new javax.swing.JTextField();
        hostLabe = new javax.swing.JLabel();
        colonLabel = new javax.swing.JLabel();
        txtFieldPort = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        txtFieldUsername = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        pwdFieldPassword = new javax.swing.JPasswordField();
        btnConnectDisconnect = new javax.swing.JButton();
        cmdField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logger = new javax.swing.JTextArea();
        activeIPField = new javax.swing.JTextField();
        activePortField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtFieldHostName.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N

        hostLabe.setText("hostname or IP address:");

        colonLabel.setText(":");

        txtFieldPort.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N
        txtFieldPort.setText("21");

        portLabel.setText("port");

        txtFieldUsername.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N

        userLabel.setText("username:");

        passwordLabel.setText("password:");

        pwdFieldPassword.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N

        btnConnectDisconnect.setText("connect / disconnect");
        btnConnectDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectDisconnectActionPerformed(evt);
            }
        });

        cmdField.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N

        jLabel1.setText("cmd:");

        btnSend.setText("send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        logger.setColumns(20);
        logger.setFont(new java.awt.Font("FreeMono", 0, 18)); // NOI18N
        logger.setLineWrap(true);
        logger.setRows(5);
        jScrollPane1.setViewportView(logger);

        activePortField.setText("38600");

        jLabel2.setText("IP and port for active transfer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hostLabe)
                            .addComponent(userLabel)
                            .addComponent(passwordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFieldUsername)
                            .addComponent(pwdFieldPassword)
                            .addComponent(txtFieldHostName, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnConnectDisconnect)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(colonLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(activePortField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(activeIPField, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdField, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hostLabe)
                            .addComponent(colonLabel)
                            .addComponent(txtFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portLabel)
                            .addComponent(activeIPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userLabel)
                            .addComponent(activePortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(pwdFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnectDisconnect))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSend))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectDisconnectActionPerformed
        if (!client.isConnected()) {
            int port;
            String host;
            String user = null;
            String pass = null;
            if (txtFieldHostName.getText().equals("") || txtFieldPort.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Invalid hostname and port");
                return;
            }
            if (!txtFieldUsername.getText().equals("") && (new String(pwdFieldPassword.getPassword()).equals(""))) {
                JOptionPane.showMessageDialog(this, "No password specified. Leave user and pass blank for anonymous login.");
                return;
            }
            try {
                port = Integer.parseInt(txtFieldPort.getText());
                host = txtFieldHostName.getText();
                if (!txtFieldUsername.getText().equals("")) {
                    user = txtFieldUsername.getText();
                    pass = new String(pwdFieldPassword.getPassword());
                }
                client.connect(host, port, user, pass);
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Invalid port number");
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, "IO Exception, check log");
            } catch (InterruptedException ie) {
                JOptionPane.showMessageDialog(this, "Interrupted Exception occured");
            }

        } else {
            try {
                client.disconnect();
                JOptionPane.showMessageDialog(this, "Disconnected");
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(FTPClientGui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnConnectDisconnectActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try {
            String command = cmdField.getText();
            if (command.equals("")) {
                JOptionPane.showMessageDialog(this, "No command specified");
                return;
            }
            String params[] = command.split(" ");
            switch (params[0]) {
                case "QUIT":
                    client.disconnect();
                    break;
                case "NLST":
                    client.list("NLST");
                    break;
                case "LIST":
                    client.list("LIST");
                    break;
                case "PASV":
                    client.enterPasv();
                    break;
                case "RETR":
                    if (params.length > 1) {
                        Runnable downloadRunner = new FTPDownloader(params[1]);
                        Thread downloadThread = new Thread(downloadRunner);
                        downloadThread.start();
                    } else {
                        JOptionPane.showMessageDialog(this, "No filename given");
                    }
                    break;
                case "CWD":
                    if (params.length > 1) {
                        client.cwd(params[1]);
                    } else {
                        JOptionPane.showMessageDialog(this, "No folder name given");
                    }
                    break;
                case "CUP":
                    client.cwd("..");
                    break;
                case "PORT":
                    if (this.activeIPField.getText().equals("") || this.activePortField.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "No IP or port for active file transfer");
                    } else {
                        client.setActiveIP(this.activeIPField.getText());
                        try {
                            client.useActiveOnPort(Integer.parseInt(this.activePortField.getText()));
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(this, "PORT command error, switching to PASV");
                            client.usePassive();
                        }
                        break;
                    }
                default:
                    JOptionPane.showMessageDialog(this, "Bad command");
                    break;
            }
            this.cmdField.setText("");
        } catch (IOException ex) {
            Logger.getLogger(FTPClientGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FTPClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTPClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTPClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTPClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTPClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FTPClientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activeIPField;
    private javax.swing.JTextField activePortField;
    private javax.swing.JButton btnConnectDisconnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JTextField cmdField;
    private javax.swing.JLabel colonLabel;
    private javax.swing.JLabel hostLabe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextArea logger;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JPasswordField pwdFieldPassword;
    private javax.swing.JTextField txtFieldHostName;
    private javax.swing.JTextField txtFieldPort;
    private javax.swing.JTextField txtFieldUsername;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
